Abruzzo = filterByColumnValue(df, 'region', 'Abruzzo')
Abruzzo = filterByColumnValue(df, 'region', 'Abruzzo')
f()
f = function() {
'sas'
}
filterByColumnValue = function (df, column, value) {
dplyr::filter(df, !!as.symbol(column)==value) # !! discards quotes
# from column string
}
library(dplyr)
df = read.csv('COVID-19-in-Italy.csv')
#Методы генерации случайных числел
?RNGkind
# Воспроизводимость случайных чисел
example = data.frame(
Factor = rep(c("A", "B", "C"), each = 300),
Variable = c(rnorm(300, 5, 2), rnorm(300, 4, 3),
rnorm(300, 2, 1)))
tapply(example$Variable, example$Factor, summary)
example1 = data.frame(
Factor = rep(c("A", "B", "C"), each = 300),
Variable = c(rnorm(300, 5, 2),
rnorm(300, 4, 3),
rnorm(300, 2, 1)))
example2 = data.frame(
Factor = rep(c("A", "B", "C"), each = 300),
Variable = c(rnorm(300, 5, 2),
rnorm(300, 4, 3),
rnorm(300, 2, 1)))
example3 = data.frame(
Factor = rep(c("A", "B", "C"), each = 300),
Variable = c(rnorm(300, 5, 2),
rnorm(300, 4, 3),
rnorm(300, 2, 1)))
example4 = data.frame(
Factor = rep(c("A", "B", "C"), each = 300),
Variable = c(rnorm(300, 5, 2),
rnorm(300, 4, 3),
rnorm(300, 2, 1)))
#Подключаем ggplot2
library(ggplot2)
#aes: Construct aesthetic mappings
p1 = ggplot(example1, aes(Variable, group = Factor, fill = Factor)) +
geom_density(alpha = 1/2)
p2 = ggplot(example2, aes(Variable, group = Factor, fill = Factor)) +
geom_density(alpha = 1/2)
p3 = ggplot(example3, aes(Variable, group = Factor, fill = Factor)) +
geom_density(alpha = 1/2)
p4 = ggplot(example4, aes(Variable, group = Factor, fill = Factor)) +
geom_density(alpha = 1/2)
p4 = ggplot(example4, aes(Variable, group = Factor, fill = Factor)) +
geom_density(alpha = 1/2)
p4 = ggplot(example4, aes(Variable, group = Factor, fill = Factor)) +
geom_density(alpha = 1/2)
rand_rate = rexp(100,5)
gamma_small = rgamma(100, 5, rand_rate)
rand_shape = rbinom(5000, 10, 2)
rand_shape = rbinom(5000, 1, 2)
rand_shape = rbinom(5000, 10, 0.2)
gamma_large = rgamma(100, rand_shape, 0.5)
gamma_large
png(file = 'qqplot3.png')
qqline(gamma_small)
qqnorm(gamma_small)
dev.off()
shapiro.test(gamma_small)
ad.test(gamma_small)
cvm.test(gamma_small)
lillie.test(gamma_small)
sf.test(gamma_small)
png(file = 'qqplot4.png')
qqline(gamma_large)
qqnorm(gamma_large)
dev.off()
shapiro.test(gamma_large)
ad.test(gamma_large)
cvm.test(gamma_large)
lillie.test(gamma_large)
sf.test(gamma_large)
library(nortest)
png(file = 'qqplot3.png')
qqline(gamma_small)
qqnorm(gamma_small)
dev.off()
shapiro.test(gamma_small)
ad.test(gamma_small)
cvm.test(gamma_small)
lillie.test(gamma_small)
sf.test(gamma_small)
png(file = 'qqplot4.png')
qqline(gamma_large)
qqnorm(gamma_large)
dev.off()
shapiro.test(gamma_large)
ad.test(gamma_large)
cvm.test(gamma_large)
lillie.test(gamma_large)
sf.test(gamma_large)
png(file = 'qqplot3.png')
qqnorm(gamma_small)
qqline(gamma_small)
dev.off()
shapiro.test(gamma_small)
ad.test(gamma_small)
cvm.test(gamma_small)
lillie.test(gamma_small)
sf.test(gamma_small)
png(file = 'qqplot4.png')
qqnorm(gamma_large)
qqline(gamma_large)
dev.off()
shapiro.test(gamma_large)
ad.test(gamma_large)
cvm.test(gamma_large)
lillie.test(gamma_large)
sf.test(gamma_large)
library(boot)
library(nortest)
rand_rate = rexp(100,5)
gamma_small = rgamma(100, 5, rand_rate)
rand_shape = rbinom(5000, 10, 0.2)
gamma_large = rgamma(100, rand_shape, 0.5)
png(file = 'qqplot3.png')
qqnorm(gamma_small)
qqline(gamma_small)
dev.off()
png(file = 'qqplot3.png')
qqnorm(gamma_small)
qqline(gamma_small)
dev.off()
dev.off()
png(file = 'qqplot3.png')
qqnorm(gamma_small)
qqline(gamma_small)
dev.off()
png(file = 'qqplot3.png')
png(file = 'qqplot3.png')
png(file = 'qqplot3.png')
png(file = 'qqplot3.png')
qqnorm(gamma_small)
qqline(gamma_small)
dev.off()
#!/usr/bin/env Rscript
setwd("~/Documents/study/msu/prog/prac/course3/msu_math_stat_prac_autumn_2020/hw06")
png(file = 'qqplot3.png')
qqnorm(gamma_small)
qqline(gamma_small)
dev.off()
png(file = 'qqplot4.png')
qqnorm(gamma_large)
qqline(gamma_large)
dev.off()
help(qqnorm)
