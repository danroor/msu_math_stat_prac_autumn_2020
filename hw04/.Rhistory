Abruzzo = filterByColumnValue(df, 'region', 'Abruzzo')
Abruzzo = filterByColumnValue(df, 'region', 'Abruzzo')
f()
f = function() {
'sas'
}
filterByColumnValue = function (df, column, value) {
dplyr::filter(df, !!as.symbol(column)==value) # !! discards quotes
# from column string
}
library(dplyr)
df = read.csv('COVID-19-in-Italy.csv')
#!/usr/bin/env Rscript
setwd("~/Documents/study/msu/prog/prac/course3/msu_math_stat_prac_autumn_2020/hw04")
#LIBRARIES
#############################################
library(dplyr)
#FUNCTIONS
#############################################
filterByColumnValue = function (df, column, value) {
dplyr::filter(df, !!as.symbol(column)==value)
# !! discards quotes
# from column string
}
df = read.csv('COVID-19-in-Italy.csv')
cdplot(region ~ new_positive, col = c("brown", "cyan"),
yaxlabels = march10$region, bw = 1, data = df)
march10  = filterByColumnValue(df, 'date', '2020-03-10 18:00:00')
cdplot(region ~ new_positive, col = c("brown", "cyan"),
yaxlabels = march10$region, bw = 1, data = df)
#В некоторых регионах слишком много зараженных по сравнению с другими регионами
#Это портит график и искажает статистику
ejected = df[df$region != 'Lombardia' & df$region != 'Piemonte'
& df$region != 'Emilia-Romagna' & df$region != 'Veneto'
& df$region != 'Liguria' & df$region != 'Toscana', ]
length(df$region)
length(ejected$region)
levels(ejected$region)
droplevels(ejected$region)
levels(ejected$region)
droplevels(ejected$region)
#В некоторых регионах слишком много зараженных по сравнению с другими регионами
#Это портит график и искажает статистику
ejected = df[df$region != 'Lombardia' & df$region != 'Piemonte'
& df$region != 'Emilia-Romagna' & df$region != 'Veneto'
& df$region != 'Liguria' & df$region != 'Toscana', ]
length(ejected$region)
droplevels(ejected$region)
ejected$region = droplevels(ejected$region)
levels(ejected$region)
#В некоторых регионах слишком много зараженных по сравнению с другими регионами
#Это портит график и искажает статистику
ejected = df[df$region != 'Lombardia' & df$region != 'Piemonte'
& df$region != 'Emilia-Romagna' & df$region != 'Veneto'
& df$region != 'Liguria' & df$region != 'Toscana', ]
ejected$region = droplevels(ejected$region)
boxplot(new_positive ~ region,
xlab = "Регионы",
ylab = "Количество заражённых",
main = "Распределение ежедневного числа заражённых по регионам Италии",
col = "cyan", data = ejected, outline = FALSE, rot = 90)
boxplot(new_positive ~ region,
xlab = "Регионы",
ylab = "Количество заражённых",
main = "Распределение ежедневного числа заражённых по регионам Италии",
col = "cyan", data = ejected,
outline = FALSE, #убираем выбросы с графика
las = 2) #делаем подписи перпендикулярными осям
boxplot(new_positive ~ region,
subtitle = "Регионы",
ylab = "Количество заражённых",
main = "Распределение ежедневного числа заражённых по регионам Италии",
col = "cyan", data = ejected,
outline = FALSE, #убираем выбросы с графика
las = 2) #делаем подписи перпендикулярными осям
png(file = 'boxplot.png')
png(file = 'boxplot.png')
boxplot(new_positive ~ region,
subtitle = "Регионы",
ylab = "Количество заражённых",
main = "Распределение ежедневного числа заражённых по регионам Италии",
col = "cyan", data = ejected,
outline = FALSE, #убираем выбросы с графика
las = 2) #делаем подписи перпендикулярными осям
dev.off()
png(file = 'boxplot.png', width = 1700, height = 1000)
boxplot(new_positive ~ region,
subtitle = "Регионы",
ylab = "Количество заражённых",
main = "Распределение ежедневного числа заражённых по регионам Италии",
col = "cyan", data = ejected,
outline = FALSE, #убираем выбросы с графика
las = 2) #делаем подписи перпендикулярными осям
dev.off()
png(file = 'boxplot.png', width = 1500, height = 800)
boxplot(new_positive ~ region,
xlab = "Регионы",
ylab = "Количество заражённых",
main = "Распределение ежедневного числа заражённых по регионам Италии",
col = "cyan", data = ejected,
outline = FALSE, #убираем выбросы с графика
las = 1) #делаем подписи перпендикулярными осям
dev.off()
png(file = 'boxplot.png', width = 1700, height = 800)
boxplot(new_positive ~ region,
xlab = "Регионы",
ylab = "Количество заражённых",
main = "Распределение ежедневного числа заражённых по регионам Италии",
col = "cyan", data = ejected,
outline = FALSE) #убираем выбросы с графика
dev.off()
png(file = 'pieplot.png', width = 1700, height = 800)
pie(july29$total_cases, labels = july29$region)
july29 = df[df$date == "2020-07-29 17:00:00"]
pie(july29$total_cases, labels = july29$region)
dev.off()
july29 = df[df$date == "2020-07-29 17:00:00"]
july29 = df[df$date = "2020-07-29 17:00:00"]
july29 = df[df$date == "2020-07-29 17:00:00"]
july29 = filterByColumnValue(df, 'date', "2020-07-29 17:00:00")
png(file = 'pieplot.png', width = 1700, height = 800)
pie(july29$total_cases, labels = july29$region)
dev.off()
july29 = july29[july29$region != 'Lombardia']
july29 = filterByColumnValue(df, 'date', "2020-07-29 17:00:00")
july29 = filterByColumnValue(july29, 'region', "Lombardia")
png(file = 'pieplot.png', width = 1700, height = 800)
pie(july29$total_cases, labels = july29$region)
dev.off()
july29 = filterByColumnValue(df, 'date', "2020-07-29 17:00:00")
july29 = df[df$region != 'Lombardia']
df = read.csv('COVID-19-in-Italy.csv')
#FUNCTIONS
#############################################
filterByColumnValue = function (df, column, value) {
dplyr::filter(df, !!as.symbol(column)==value)
# !! discards quotes
# from column string
}
july29 = df[df$region != 'Lombardia']
#ЗАДАНИЕ 4
###################################################################
#Нарисуем круговую диаграмму для суммарного количества случаев заболевания
#по регионам по данным на 29.07.2020
df
july29 = df[df$region != 'Lombardia']
#В некоторых регионах слишком много зараженных по сравнению с другими регионами
#Это портит график и искажает статистику, так что не будем их рассматривать
ejected = df[df$region != 'Lombardia' & df$region != 'Piemonte'
& df$region != 'Emilia-Romagna' & df$region != 'Veneto'
& df$region != 'Liguria' & df$region != 'Toscana', ]
july29 = df[df$region != 'Lombardia']
july29 = df[df$region != 'Lombardia' & df$date == "2020-07-29 17:00:00",]
png(file = 'pieplot.png', width = 1700, height = 800)
pie(july29$total_cases, labels = july29$region)
dev.off()
png(file = 'pieplot.png', width = 1700, height = 800)
pie(july29$total_cases, labels = july29$region, radius = 1.5)
dev.off()
png(file = 'pieplot.png', width = 1700, height = 800)
pie(july29$total_cases, labels = july29$region, radius = 1)
dev.off()
png(file = 'pieplot.png', width = 1700, height = 800)
pie(july29$total_cases, labels = july29$region, radius = 1,
las = 2)
dev.off()
july29 = df[df$region != 'Lombardia'
& df$region != 'Sardegna'
& df$date == "2020-07-29 17:00:00",]
png(file = 'pieplot.png', width = 1700, height = 800)
pie(july29$total_cases, labels = july29$region, radius = 1,
las = 2)
dev.off()
cases = july29$total_cases
lbl = sprintf("%s (%.1f%s)", july29$region, 100 * cases/sum(cases), "%")
png(file = 'pieplot.png', width = 1700, height = 800)
pie(cases, labels = lbl, radius = 1)
dev.off()
png(file = 'pieplot.png', width = 1700, height = 800)
pie(cases, labels = lbl, radius = 1,
title = 'Распределение суммарного числа заражённых по регионам Италии по данным на 29.07.2020 ')
dev.off()
july29 = df[df$region != 'Lombardia'
& df$region != 'Sardegna'
& df$date == "2020-07-29 17:00:00",]
cases = july29$total_cases
#Напишем для каждого региона, сколько процентов
#От общего числа случаев приходится на него
lbl = sprintf("%s (%.1f%s)", july29$region, 100 * cases/sum(cases), "%")
png(file = 'pieplot.png', width = 1700, height = 800)
pie(cases, labels = lbl, radius = 1,
title = 'Распределение суммарного числа заражённых по регионам Италии по данным на 29.07.2020 ')
png(file = 'pieplot.png', width = 1700, height = 800)
pie(cases, labels = lbl, radius = 1,
title = 'Распределение суммарного числа заражённых по регионам Италии (29.07.2020)')
png(file = 'pieplot.png', width = 1700, height = 800)
pie(cases, labels = lbl, radius = 1,
title = 'Суммарное число заражённых по регионам (29.07.2020)')
png(file = 'pieplot.png', width = 1700, height = 800)
pie(cases, labels = lbl, radius = 1,
title = 'Суммарное число заражён')
pie(cases, labels = lbl, radius = 1)
pie(cases, labels = lbl, radius = 1,
title = 'Суммарное')
png(file = 'pieplot.png', width = 1700, height = 800)
pie(cases, labels = lbl, radius = 1,
main = 'Суммарное число заражённых по регионам Италии (29.07.2020)')
dev.off()
#Напишем для каждого региона, сколько процентов
#От общего числа случаев приходится на него
lbl = sprintf("%s (%d, %.1f%s)", july29$region, cases, 100 * cases/sum(cases), "%")
png(file = 'pieplot.png', width = 1700, height = 800)
pie(cases, labels = lbl, radius = 1,
main = 'Суммарное число заражённых по регионам Италии (29.07.2020)')
dev.off()
df[df$region=='Lombardia',]$deaths
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(region ~ new_positive, col = c("brown", "cyan"),
yaxlabels = march10$region, bw = 1, data = df)
dev.off()
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(region ~ new_positive, col = c("brown", "cyan"),
yaxlabels = march10$region, bw = 1, data = ejected)
dev.off()
df$domestic_isolation
df[df$region == 'Abruzzo']$domestic_isolation
df[df$region == 'Abruzzo',]$domestic_isolation
df[df$region == 'Calabria',]$domestic_isolation
df[df$region == 'Calabria',]$intensive_therapy
df[df$region == 'Lombardia',]$intensive_therapy
df[df$region == 'Molise',]$intensive_therapy
x = array(c(3,3,3))
y = array(c(2,2,2))
x-y
df$deaths
df[df$region == 'Abruzzo']$deaths
df[df$region == 'Abruzzo',]$deaths
dead = array(df[df$region == 'Abruzzo',]$deaths)
dead
dead[1:]
dead[2:]
dead[2:3]
dead[141:142]
dead[2:length(dead)]
w = dead[2:length(dead)]
c(0,w)
w = dead[1:length(dead)-1]
c(0,w)
dead = array(df[df$region == 'Abruzzo',]$deaths)
shift = c(0,dead[1:length(dead)-1])
dead - shift
dead = array(df[df$region == 'Lombardia',]$deaths)
shift = c(0,dead[1:length(dead)-1])
dead_daily = dead - shift
dead_daily
dead = array(df[df$region == 'Calabria',]$deaths)
shift = c(0,dead[1:length(dead)-1])
dead_daily = dead - shift
dead_daily
dead = array(df[df$region == 'Piemonte',]$deaths)
shift = c(0,dead[1:length(dead)-1])
dead_daily = dead - shift
dead_daily
dead = array(df[df$region == 'Emilia-Romagna',]$deaths)
shift = c(0,dead[1:length(dead)-1])
dead_daily = dead - shift
dead_daily
two_regs = df[df$region == 'Lombardia'
| df$region == 'Emilia-Romagna']
two_regs = df[df$region == 'Lombardia'
| df$region == 'Emilia-Romagna',]
two_regs = droplevels(two_regs)
levels(two_regs)
two_regs
two_regs = df[df$region == 'Lombardia'
| df$region == 'Emilia-Romagna',]
levels(two_regs)
two_regs = df[df$region == 'Lombardia'
| df$region == 'Emilia-Romagna',]
two_regs$region = droplevels(two_regs$region)
levels(two_regs$region)
two_regs = df[df$region == 'Lombardia' | df$region == 'Emilia-Romagna',]
two_regs$region = droplevels(two_regs$region)
levels(two_regs$region)
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(region ~ new_positive, col = c("brown", "cyan"),
yaxlabels = levels(two_regs$region), bw = 1, data = two_regs)
dev.off()
# Примеры использования функции cdplot
library(HSAUR2)
data(plasma)
summary(plasma)
layout(matrix(1:2, ncol = 2))
cdplot(ESR ~ fibrinogen, col = c("coral", "skyblue"),
yaxlabels = c("< 20 mm/h", "> 20 mm/h"), data = plasma)
cdplot(ESR ~ globulin, col = c("coral", "skyblue"),
yaxlabels = c("< 20 mm/h", "> 20 mm/h"), data = plasma)
two_regs = df[df$region == 'Lombardia' | df$region == 'Toscana',]
two_regs$region = droplevels(two_regs$region)
levels(two_regs$region)
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(region ~ new_positive, col = c("brown", "cyan"),
yaxlabels = levels(two_regs$region), bw = 1, data = two_regs)
dev.off()
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(region ~ new_positive, col = c("brown", "cyan"),
yaxlabels = levels(two_regs$region), bw = 0.7, data = two_regs)
dev.off()
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(region ~ new_positive, col = c("brown", "cyan"),
yaxlabels = levels(two_regs$region), bw = 0.1, data = two_regs)
dev.off()
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(region ~ hospitayzed_with_symptoms, col = c("brown", "cyan"),
yaxlabels = levels(two_regs$region), bw = 0.8, data = two_regs)
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(region ~ hospitalyzed_with_symptoms, col = c("brown", "cyan"),
yaxlabels = levels(two_regs$region), bw = 0.8, data = two_regs)
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(region ~ hospitalized_with_symptoms, col = c("brown", "cyan"),
yaxlabels = levels(two_regs$region), bw = 0.8, data = two_regs)
dev.off()
two_regs$hospitalized_with_symptoms
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(region ~ deaths, col = c("brown", "cyan"),
yaxlabels = levels(two_regs$region), bw = 0.8, data = two_regs)
dev.off()
two_regs$deaths
two_regs$hospitalized_with_symptoms
two_regs = df[df$region == 'Lombardia']# | df$region == 'Toscana',]
two_regs = df[df$region == 'Lombardia',]# | df$region == 'Toscana',]
two_regs$hospitalized_with_symptoms
df$moreThan1000hospitalized = df$hospitalized_with_symptoms > 1000
df$moreThan1000hospitalized
df$moreThan1000hospitalized = factor(df$moreThan1000hospitalized)
df$moreThan1000hospitalized
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(moreThan1000hospitalized ~ new_positive, col = c("brown", "cyan"),
yaxlabels = c('hosp. <= 1000', 'hosp. > 1000'), bw = 0.8, data = df)
dev.off()
cdplot(moreThan1000hospitalized ~ new_positive, col = c("brown", "cyan"),
yaxlabels = c('hosp. <= 1000', 'hosp. > 1000'), bw = 0.8, data = df)
df$new_positive = df$new_positive / 1000
cdplot(moreThan1000hospitalized ~ new_positive, col = c("brown", "cyan"),
yaxlabels = c('hosp. <= 1000', 'hosp. > 1000'), bw = 0.8, data = df)
df$new_positive_thousands = df$new_positive / 1000
df = read.csv('COVID-19-in-Italy.csv')
df$moreThan1000hospitalized = df$hospitalized_with_symptoms > 10000
df$moreThan1000hospitalized = factor(df$moreThan1000hospitalized)
df$new_positive_thousands = df$new_positive / 1000
png(file = 'cdplot.png', width = 1700, height = 800)
cdplot(moreThan1000hospitalized ~ new_positive_thousands, col = c("brown", "cyan"),
yaxlabels = c('hosp. <= 1000', 'hosp. > 1000'), bw = 0.8, data = df)
dev.off()
